trigger: none
pr:
  branches:
    include:
    - master
  paths:
    include:
    - experimental/ros/noetic/*
    - experimental/ros/azure-pipelines.noetic.release.yml

resources:
  pipelines:
  - pipeline: ms-iot.external
    source: vNext/ms-iot.external
    version: '20200924.1'

variables:
  RELEASE_DATE: $[format('{0:yyMMddHHmm}', pipeline.startTime)]
  RELEASE_VERSION: '20200918.0.0.$(RELEASE_DATE)'
  ROS_DISTRO: 'noetic'
  INSTALL_DIR: 'c:\opt\ros\noetic\x64'

stages:
- stage: build
  displayName: 'Build ${{ variables.ROS_DISTRO }}'
  jobs:
  - job: Build
    pool: 'Edge-Robotics-VS2019'
    variables:
      WORKSPACE_DIR: 'd:\ws'
      PDB_OUTPUT_DIRECTORY: 'd:\symbols'
      ROS_DISTRO: 'noetic'
      ROS_VERSION: '1'
    timeoutInMinutes: 360
    workspace:
      clean: all
    steps:
    - script: 'reg add HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f'
      displayName: 'Enable long paths on Windows'
    - download: ms-iot.external
      artifact: '${{ variables.ROS_DISTRO }}-external'
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '$(PIPELINE.WORKSPACE)\ms-iot.external\$(ROS_DISTRO)-external\external.zip'
        destinationFolder: '$(INSTALL_DIR)'
        cleanDestinationFolder: true
    - script: |
        rd /s /q %WORKSPACE_DIR%
        mkdir %WORKSPACE_DIR%
        rd /s /q %PDB_OUTPUT_DIRECTORY%
        mkdir %PDB_OUTPUT_DIRECTORY%
      displayName: 'Clean symbols folder'
    - script: |
        call %Build_SourcesDirectory%\experimental\ros\noetic\patch.bat
      displayName: 'Pre-patch the install directory'
    - script: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
        mkdir %WORKSPACE_DIR%\src
        pushd %WORKSPACE_DIR%
        vcs import --force --shallow --recursive src < %Build_SourcesDirectory%\experimental\ros\gazebo.rosinstall
        vcs import --force --shallow --recursive src < %Build_SourcesDirectory%\experimental\ros\noetic\noetic.repos
        vcs import --force --shallow --recursive src < %Build_SourcesDirectory%\experimental\ros\noetic\noetic_override.repos
        xcopy /Y /S /I %Build_SourcesDirectory%\experimental\ros\src_patch src
        call %Build_SourcesDirectory%\experimental\ros\noetic\build.bat
      displayName: 'Build noetic'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(WORKSPACE_DIR)\log'
        artifactName: '$(ROS_DISTRO)-log'
      condition: always()
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(WORKSPACE_DIR)\build'
        contents: '**\*.pdb'
        targetFolder: '$(PDB_OUTPUT_DIRECTORY)'
        cleanTargetFolder: true
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(PDB_OUTPUT_DIRECTORY)'
        includeRootFolder: false
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/symbols.zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(INSTALL_DIR)'
        includeRootFolder: false
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/install.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/install.zip'
        artifactName: '$(ROS_DISTRO)-install'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/symbols.zip'
        artifactName: '$(ROS_DISTRO)-symbols'

- stage: packaging
  displayName: 'Packaging ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - build
  jobs:
  - template: azure-pipelines.packaging.yml
    parameters:
      INSTALL_DIR: ${{ variables.INSTALL_DIR }}
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}
      RELEASE_VERSION: ${{ variables.RELEASE_VERSION }}
      PACKAGE_NAME: 'ros-${{ variables.ROS_DISTRO }}-desktop_full'

- stage: publish_prerelease
  displayName: 'Publish Prerelease ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - packaging
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - template: azure-pipelines.publish.prerelease.yml
    parameters:
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}

- stage: publish_release
  displayName: 'Publish Release ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - packaging
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - template: azure-pipelines.publish.release.yml
    parameters:
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}
