trigger: none
pr: none

jobs:
- job: Build
  pool: 'Edge-Robotics-VS2019'
  variables:
    INSTALL_DIR: 'c:\opt\ros\foxy\x64'
    PDB_OUTPUT_DIRECTORY: 'd:\symbols'
    ROS_DISTRO: 'foxy'
    ROS_VERSION: '1'
  timeoutInMinutes: 360
  workspace:
    clean: all
  steps:
  - script: 'reg add HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f'
    displayName: 'Enable long paths on Windows'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific' # Options: current, specific
      project: 'ros-win' # Required when source == Specific
      pipeline: 100 # Required when source == Specific
      buildVersionToDownload: 'specific' # Required when source == Specific# Options: latest, latestFromBranch, specific
      artifactName: '$(ROS_DISTRO)-external'
      buildId: 8130
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)\$(ROS_DISTRO)-external\external.zip'
      destinationFolder: '$(INSTALL_DIR)'
      cleanDestinationFolder: true
  - script: |
      rd /s /q %PDB_OUTPUT_DIRECTORY%
      mkdir %PDB_OUTPUT_DIRECTORY%
    displayName: 'Clean symbols folder'
  - script: |
      rd /s /q %INSTALL_DIR%\include\kdl
      rd /s /q %INSTALL_DIR%\share\orocos_kdl
      rd /s /q %INSTALL_DIR%\share\orocos-kdl
      DEL /F /Q %INSTALL_DIR%\lib\orocos-kdl.lib
      DEL /F /Q %INSTALL_DIR%\lib\pkgconfig\orocos-kdl.pc
      DEL /F /Q %INSTALL_DIR%\lib\pkgconfig\orocos_kdl.pc
    displayName: 'Remove orocos-kdl'
  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
      mkdir ws\src
      cd ws
      rosinstall_generator desktop --rosdistro foxy --deps --upstream --format repos > prerelease-foxy.repos
      vcs import --force src < prerelease-foxy.repos
      vcs import --force src < ..\experimental\ros\foxy\foxy_override_prerelease.repos
      call ..\experimental\ros\build_ros2.bat
    displayName: 'build foxy'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: .\ws\log
      artifactName: '$(ROS_DISTRO)-log'
    condition: always()
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(PDB_OUTPUT_DIRECTORY)'
      includeRootFolder: false
      archiveType: 'zip' # Options: zip, 7z, tar, wim
      tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.ArtifactStagingDirectory)/symbols.zip'
      replaceExistingArchive: true
    condition: always()
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(INSTALL_DIR)'
      includeRootFolder: false
      archiveType: 'zip' # Options: zip, 7z, tar, wim
      tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.ArtifactStagingDirectory)/install.zip'
      replaceExistingArchive: true
    condition: always()
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/install.zip'
      artifactName: '$(ROS_DISTRO)-install'
    condition: always()
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/symbols.zip'
      artifactName: '$(ROS_DISTRO)-symbols'
    condition: always()
- job: Setup
  dependsOn: Build
  pool:
    vmImage: 'windows-2019'
  variables:
    INSTALL_DIR: 'c:\opt\ros\foxy\x64'
    ROS_DISTRO: 'foxy'
  timeoutInMinutes: 360
  workspace:
    clean: all
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current' # Options: current, specific
      artifactName: '$(ROS_DISTRO)-install'
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)\$(ROS_DISTRO)-install\install.zip'
      destinationFolder: '$(INSTALL_DIR)'
      cleanDestinationFolder: true
  - script: |
      echo #define MyAppVersion "%BUILD_BUILDNUMBER%" > .\experimental\ros\%ROS_DISTRO%\version.inc
      iscc .\experimental\ros\%ROS_DISTRO%\setup.iss
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '.\experimental\ros\$(ROS_DISTRO)\Output'
      artifactName: '$(ROS_DISTRO)-setup'
