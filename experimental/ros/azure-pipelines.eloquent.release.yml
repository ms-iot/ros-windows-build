trigger: none
pr: none

resources:
  pipelines:
  - pipeline: ms-iot.external
    source: vNext/ms-iot.external
    version: '20200902.1'

variables:
  RELEASE_DATE: $[format('{0:yyMMddHHmm}', pipeline.startTime)]
  RELEASE_VERSION: '20200813.0.0.$(RELEASE_DATE)'
  IGNORED_PACKAGES: 'rttest test_osrf_testing_tools_cpp tlsf cv_bridge camera_calibration_parsers'
  ROS_DISTRO: 'eloquent'
  INSTALL_DIR: 'c:\opt\ros\eloquent\x64'

stages:
- stage: build
  displayName: 'Build ${{ variables.ROS_DISTRO }}'
  jobs:
  - job: Build
    pool: 'Edge-Robotics-VS2019'
    variables:
      PDB_OUTPUT_DIRECTORY: 'd:\symbols'
      ROS_VERSION: '2'
    timeoutInMinutes: 360
    workspace:
      clean: all
    steps:
    - script: 'reg add HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f'
      displayName: 'Enable long paths on Windows'
    - download: ms-iot.external
      artifact: '${{ variables.ROS_DISTRO }}-external'
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '$(PIPELINE.WORKSPACE)\ms-iot.external\$(ROS_DISTRO)-external\external.zip'
        destinationFolder: '$(INSTALL_DIR)'
        cleanDestinationFolder: true
    - script: |
        rd /s /q %PDB_OUTPUT_DIRECTORY%
        mkdir %PDB_OUTPUT_DIRECTORY%
      displayName: 'Clean symbols folder'
    - script: |
        rd /s /q %INSTALL_DIR%\include\kdl
        rd /s /q %INSTALL_DIR%\share\orocos_kdl
        rd /s /q %INSTALL_DIR%\share\orocos-kdl
        DEL /F /Q %INSTALL_DIR%\lib\orocos-kdl.lib
        DEL /F /Q %INSTALL_DIR%\lib\pkgconfig\orocos-kdl.pc
        DEL /F /Q %INSTALL_DIR%\lib\pkgconfig\orocos_kdl.pc
      displayName: 'Remove orocos-kdl'
    - script: |
        xcopy /Y /S /I .\experimental\ros\%ROS_DISTRO%\pre-patch %INSTALL_DIR%
      displayName: 'Pre-patch the install directory'
    - script: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
        mkdir ws\src
        cd ws
        vcs import --force src < ..\experimental\ros\gazebo.rosinstall
        vcs import --force src < ..\experimental\ros\eloquent\eloquent.repos
        vcs import --force src < ..\experimental\ros\eloquent\eloquent_override.repos
        call ..\experimental\ros\build_ros2.bat
      displayName: 'Build eloquent'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: .\ws\log
        artifactName: '$(ROS_DISTRO)-log'
      condition: always()
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(PDB_OUTPUT_DIRECTORY)'
        includeRootFolder: false
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/symbols.zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(INSTALL_DIR)'
        includeRootFolder: false
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/install.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/install.zip'
        artifactName: '$(ROS_DISTRO)-install'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/symbols.zip'
        artifactName: '$(ROS_DISTRO)-symbols'

- stage: packaging
  displayName: 'Packaging ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - build
  jobs:
  - template: azure-pipelines.packaging.yml
    parameters:
      INSTALL_DIR: ${{ variables.INSTALL_DIR }}
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}
      RELEASE_VERSION: ${{ variables.RELEASE_VERSION }}

- stage: publish_prerelease
  displayName: 'Publish Prerelease ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - packaging
  jobs:
  - template: azure-pipelines.publish.prerelease.yml
    parameters:
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}

- stage: publish_release
  displayName: 'Publish Release ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - packaging
  jobs:
  - template: azure-pipelines.publish.release.yml
    parameters:
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}
