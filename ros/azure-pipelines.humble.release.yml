trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - ros/humble/*
    - ros/azure-pipelines.humble.release.yml
pr:
  branches:
    include:
    - master
  paths:
    include:
    - ros/humble/*
    - ros/azure-pipelines.humble.release.yml

resources:
  pipelines:
  - pipeline: ms-iot.ros-external-vs2022
    source: ms-iot.ros-external-vs2022
    version: '20221013.2'

name: '$(Date:yyMMdd).$(Rev:rrrr)'

variables:
  RELEASE_VERSION: $(Build.BuildNumber)
  ROS_DISTRO: 'humble'
  INSTALL_DIR: 'c:\opt\ros\humble\x64'

stages:
- stage: build
  displayName: 'Build ${{ variables.ROS_DISTRO }}'
  jobs:
  - job: Build
    pool: Edge-Robotics-VS2022-ESBuild
    variables:
      PDB_OUTPUT_DIRECTORY: 'd:\symbols'
      ROS_VERSION: '2'
    timeoutInMinutes: 360
    workspace:
      clean: all
    steps:
    - script: 'reg add HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f'
      displayName: 'Enable long paths on Windows'
    - download: ms-iot.ros-external-vs2022
      artifact: '${{ variables.ROS_DISTRO }}-external'
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '$(PIPELINE.WORKSPACE)\ms-iot.ros-external-vs2022\$(ROS_DISTRO)-external\external.zip'
        destinationFolder: '$(INSTALL_DIR)'
        cleanDestinationFolder: true
    - script: |
        rd /s /q %PDB_OUTPUT_DIRECTORY% 2>&1
        mkdir %PDB_OUTPUT_DIRECTORY%
      displayName: 'Clean symbols folder'
    - script: |
        call %Build_SourcesDirectory%\ros\humble\patch.bat
    - script: |
        set PYTHONIOENCODING=utf-8
        set PYTHONLEGACYWINDOWSSTDIO=utf-8
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
        where python
        copy %INSTALL_DIR%\python.exe %INSTALL_DIR%\python3.exe
        dir %INSTALL_DIR%
        set
        mkdir ws\src
        pushd ws
        vcs import --force --shallow --recursive src <  %Build_SourcesDirectory%\ros\humble\humblemin.repos
        vcs import --force --shallow --recursive src <  %Build_SourcesDirectory%\ros\humble\humble_override.repos
        dir src
        xcopy /Y /S /I ..\ros\src_patch src
        call ..\ros\humble\build.bat
        popd
      displayName: 'build humble'
    - script: |
        set PYTHONIOENCODING=utf-8
        set PYTHONLEGACYWINDOWSSTDIO=utf-8
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
        call "%INSTALL_DIR%\setup.bat"
        set
        mkdir microros2_ws\src
        pushd microros2_ws
        vcs import --force --shallow --recursive src <  %Build_SourcesDirectory%\ros\humble\microros.repos
        colcon build --event-handlers=console_cohesion+ --merge-install --install-base %INSTALL_DIR% --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING:BOOL=False -DBUILD_DOCS:BOOL=False -DCMAKE_PDB_OUTPUT_DIRECTORY=%PDB_OUTPUT_DIRECTORY%   -DUAGENT_USE_SYSTEM_LOGGER=ON
        popd
      displayName: 'build MicroROS2'
    - script: |
        set PYTHONIOENCODING=utf-8
        set PYTHONLEGACYWINDOWSSTDIO=utf-8
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
        call "%INSTALL_DIR%\setup.bat"
        set
        mkdir gz_ws\src
        pushd gz_ws
        vcs import --force --shallow --recursive src <  %Build_SourcesDirectory%\ros\gazebo11\gazebo11.rosinstall
        colcon build --event-handlers=console_cohesion+ --merge-install --install-base %INSTALL_DIR% --cmake-target install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING:BOOL=False -DBUILD_DOCS:BOOL=False -DCMAKE_PDB_OUTPUT_DIRECTORY=%PDB_OUTPUT_DIRECTORY%
        popd
      displayName: 'build gazebo'
    - script: |
        set PYTHONIOENCODING=utf-8
        set PYTHONLEGACYWINDOWSSTDIO=utf-8
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
        call "%INSTALL_DIR%\setup.bat"
        set
        mkdir nav2_ws\src
        pushd nav2_ws
        vcs import --force --shallow --recursive src <  %Build_SourcesDirectory%\ros\humble\nav2.repos
        colcon build --event-handlers=console_cohesion+ --merge-install --install-base %INSTALL_DIR% --cmake-target install --packages-skip nav2_system_tests --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING:BOOL=False -DBUILD_DOCS:BOOL=False -DCMAKE_PDB_OUTPUT_DIRECTORY=%PDB_OUTPUT_DIRECTORY% 
        popd
      displayName: 'build Nav2'
    - script: |
        set PYTHONIOENCODING=utf-8
        set PYTHONLEGACYWINDOWSSTDIO=utf-8
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=%INSTALL_DIR%\Scripts;%INSTALL_DIR%;%INSTALL_DIR%\bin;%PATH%
        call "%INSTALL_DIR%\setup.bat"
        set
        mkdir moveit2_ws\src
        pushd moveit2_ws
        vcs import --force --shallow --recursive src <  %Build_SourcesDirectory%\ros\humble\moveit2.repos
        colcon build --event-handlers=console_cohesion+ --merge-install --install-base %INSTALL_DIR% --cmake-target install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING:BOOL=False -DBUILD_DOCS:BOOL=False -DCMAKE_PDB_OUTPUT_DIRECTORY=%PDB_OUTPUT_DIRECTORY% 
        popd
      displayName: 'build MoveIt2'
    - powershell: |
        & $(Build.Repository.LocalPath)\ros\collectDisclosures.ps1 -Path $Env:INSTALL_DIR -outputfile $Env:Build_SourcesDirectory\ros\humble\LICENSE.txt
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: .\ws\log
        artifactName: '$(ROS_DISTRO)-log'
      condition: always()
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: .\moveit2_ws\log
        artifactName: 'moveit-$(ROS_DISTRO)-log'
      condition: always()
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: .\moveit2_ws\log
        artifactName: 'moveit-$(ROS_DISTRO)-log'
      condition: always()
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: .\nav2_ws\log
        artifactName: 'nav2-$(ROS_DISTRO)-log'
      condition: always()
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: .\gz_ws\log
        artifactName: 'gz-$(ROS_DISTRO)-log'
      condition: always()
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(PDB_OUTPUT_DIRECTORY)'
        includeRootFolder: false
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/symbols.zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(INSTALL_DIR)'
        includeRootFolder: false
        archiveType: 'zip' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/install.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/install.zip'
        artifactName: '$(ROS_DISTRO)-install'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/symbols.zip'
        artifactName: '$(ROS_DISTRO)-symbols'

- stage: packaging
  displayName: 'Packaging ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - build
  jobs:
  - template: azure-pipelines.packaging.yml
    parameters:
      INSTALL_DIR: ${{ variables.INSTALL_DIR }}
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}
      RELEASE_VERSION: ${{ variables.RELEASE_VERSION }}
      PACKAGE_NAME: 'ros-${{ variables.ROS_DISTRO }}-desktop'
- stage: signing
  displayName: 'Signing ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - packaging
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - template: azure-pipelines.signing.yml
    parameters:
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}
      
- stage: publish_prerelease
  displayName: 'Publish Prerelase ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - packaging
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - template: azure-pipelines.publish.prerelease.yml
    parameters:
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}

- stage: publish_release
  displayName: 'Publish Release ${{ variables.ROS_DISTRO }}'
  dependsOn:
  - packaging
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - template: azure-pipelines.publish.release.yml
    parameters:
      ROS_DISTRO: ${{ variables.ROS_DISTRO }}
